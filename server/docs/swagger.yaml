basePath: /
definitions:
  models.Comment:
    properties:
      commentID:
        type: integer
      commentMSG:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
      users:
        description: Many-to-Many relationship (belongs to) | Many users can have
          many comments which lead to CommentUser table
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.CommentUser:
    properties:
      commentID:
        description: Composite primary key
        type: integer
      userID:
        description: Composite primary key
        type: integer
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      firstname:
        maxLength: 32
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
      surname:
        maxLength: 32
        minLength: 2
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - firstname
    - password
    - surname
    - username
    type: object
  models.Post:
    properties:
      createdAt:
        type: string
      message:
        type: string
      postID:
        type: integer
      updatedAt:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: One-to-One relationship (belongs to) | One post can have one
          user
      userID:
        type: integer
    type: object
  models.User:
    properties:
      comments:
        description: Many-to-Many relationship (has many) | One user can have many
          comments
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      email:
        type: string
      firstname:
        type: string
      posts:
        description: One-to-Many relationship (has many) | One user can have many
          posts
        items:
          $ref: '#/definitions/models.Post'
        type: array
      surname:
        type: string
      uid:
        type: integer
      username:
        type: string
    type: object
host: localhost:1323
info:
  contact: {}
  description: This is a simple social feed API for DataWow Take Home Assignment
  title: Simple Social Feed API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Check if the server is running
      produces:
      - application/json
      responses:
        "200":
          description: Server is running
          schema:
            type: string
      summary: Health check
      tags:
      - healthcheck
  /comments:
    get:
      consumes:
      - application/json
      description: Get all comments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Get all comments
      tags:
      - comments
  /commentuser:
    get:
      consumes:
      - application/json
      description: Get all user comments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommentUser'
      summary: Get all user comments
      tags:
      - commentUser
  /posts:
    get:
      consumes:
      - application/json
      description: Get all posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
      summary: Get all posts
      tags:
      - posts
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: User ID
        in: query
        name: userid
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve users
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create single user
      parameters:
      - description: User object that needs to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: Create single user
      tags:
      - users
  /users/{id}:
    put:
      consumes:
      - application/json
      description: Update single user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Update single user
      tags:
      - users
swagger: "2.0"
